name: Build and Release Rust Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    name: Build and Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev jq

      - name: Install Dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config openssl jq

      - name: Install jq on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install jq -y

      - name: Extract package name
        id: extract-name
        shell: bash
        working-directory: dev/project
        run: |
          PACKAGE_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].name')
          echo "Package name: $PACKAGE_NAME"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Build Project
        working-directory: dev/project
        run: cargo build --release

      - name: Archive Binaries on Linux
        if: runner.os == 'Linux'
        working-directory: dev/project
        run: |
          tar -czvf $PACKAGE_NAME-linux.tar.gz -C target/release $PACKAGE_NAME
          echo "ASSET_NAME=$PACKAGE_NAME-linux.tar.gz" >> $GITHUB_ENV

      - name: Archive Binaries on macOS
        if: runner.os == 'macOS'
        working-directory: dev/project
        run: |
          tar -czvf $PACKAGE_NAME-macos.tar.gz -C target/release $PACKAGE_NAME
          echo "ASSET_NAME=$PACKAGE_NAME-macos.tar.gz" >> $GITHUB_ENV

      - name: Archive Binaries on Windows
        if: runner.os == 'Windows'
        working-directory: dev\project
        shell: powershell
        env:
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
        run: |
          Compress-Archive -Path "target\release\$env:PACKAGE_NAME.exe" -DestinationPath "$env:PACKAGE_NAME-windows.zip"
          echo "ASSET_NAME=$($env:PACKAGE_NAME)-windows.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dev/project/${{ env.ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
