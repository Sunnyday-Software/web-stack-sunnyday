name: ${project_name}
services:

  make:
    image: ${project_name}-make:${MD5_MAKE}
    build:
      context: ./dev/docker/make
      dockerfile: Dockerfile
    volumes:
      - ${HOST_PROJECT_PATH}:/app

  nodejs:
    image: ${project_name}-nodejs:${MD5_NODEJS}
    build:
      context: ./dev/docker/nodejs
      dockerfile: Dockerfile
    volumes:
      - ${HOST_PROJECT_PATH}:/app
      - ${HOST_PROJECT_PATH}/.npm-cache:/var/npm-cache
    environment:
      - HOST=0.0.0.0

  postgres:
    image: ${project_name}-postgres:${MD5_POSTGRES}
    build:
      context: ./dev/docker/postgres
      dockerfile: Dockerfile
    shm_size: 128mb
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - ${HOST_PROJECT_PATH}/.runtime/pgdata:/var/lib/postgresql/data
    ports:
      - "${postgres_port}:5432"
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

  keystone:
    image: ${project_name}-nodejs:${MD5_NODEJS}
    build:
      context: ./dev/docker/nodejs
      dockerfile: Dockerfile
    volumes:
      - ${HOST_PROJECT_PATH}:/app
      - ${HOST_PROJECT_PATH}/.npm-cache:/var/npm-cache
    environment:
      - HOST=0.0.0.0
    ports:
      - "${keystone_port}:3000"
    command:
      - "/app/dev/scripts/run-keystone-project.sh"
    restart: unless-stopped
    healthcheck:
      test: >
        node -e "
          require('http').get('http://localhost:3000', (res) => {
            //302 perchÃ© propone un redirect alla pagina di login
            if (res.statusCode !== 302) {
              console.error('Status code:', res.statusCode);
              process.exit(1);
            }
            res.on('data', () => {}); // Consuma i dati se necessario
            res.on('end', () => process.exit(0));
          }).on('error', (err) => {
            console.error('Error:', err.message);
            process.exit(1);
          });
        "
      timeout: 5s
      interval: 5s
      retries: 15
    depends_on:
      postgres:
        condition: service_healthy

  astro:
    image: ${project_name}-nodejs:${MD5_NODEJS}
    build:
      context: ./dev/docker/nodejs
      dockerfile: Dockerfile
    volumes:
      - ${HOST_PROJECT_PATH}:/app
      - ${HOST_PROJECT_PATH}/.npm-cache:/var/npm-cache
    environment:
      - HOST=0.0.0.0
      - CHOKIDAR_USEPOLLING
    ports:
      - "${astro_port}:4321"
    command:
      - "/app/dev/scripts/run-astro-project.sh"
    healthcheck:
      test: >
        node -e "
          require('http').get('http://localhost:4321', (res) => {
            if (res.statusCode !== 200) {
              console.error('Status code:', res.statusCode);
              process.exit(1);
            }
            res.on('data', () => {}); // Consuma i dati se necessario
            res.on('end', () => process.exit(0));
          }).on('error', (err) => {
            console.error('Error:', err.message);
            process.exit(1);
          });
        "
      timeout: 5s
      interval: 5s
      retries: 15
    depends_on:
      keystone:
        condition: service_healthy


  pgadmin:
    image: ${project_name}-pgadmin:${MD5_PGADMIN}
    build:
      context: ./dev/docker/pgadmin
      dockerfile: Dockerfile
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
    volumes:
      - ${HOST_PROJECT_PATH}/.runtime/pgadmin:/var/lib/pgadmin
      - ${HOST_PROJECT_PATH}/dev/docker/pgadmin/data/servers.json:/pgadmin4/servers.json
    ports:
      - "${pgadmin_port}:80"
    depends_on:
      postgres:
        condition: service_healthy

  s3:
    image: "bitnami/minio:latest"
    environment:
      - MINIO_DATA_DIR=/minio/path
      - MINIO_DEFAULT_BUCKETS
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    volumes:
      - ${HOST_PROJECT_PATH}/.runtime/minio:/minio/path
    ports:
      - "${s3_port}:9000"
      - "9001:9001"


  smtp:
    image: maildev/maildev:2.1.0
    environment:
      - MAILDEV_WEB_PORT=1080
      - MAILDEV_SMTP_PORT=25
    ports:
      - "${smtp_port}:1080"
      - "25:25"

  vault:
    image: hashicorp/vault:1.18
    ports:
      - "${vault_port}:8200"
    environment:
      - VAULT_ADDR
    volumes:
      - ${HOST_PROJECT_PATH}/.runtime/vault/config:/vault/config
      - ${HOST_PROJECT_PATH}/.runtime/vault/file:/vault/file
      - ${HOST_PROJECT_PATH}/.runtime/vault/logs:/vault/logs
      - ${HOST_PROJECT_PATH}/.runtime/vault/data:/vault/data
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault-config.hcl
    depends_on:
      postgres:
        condition: service_healthy
